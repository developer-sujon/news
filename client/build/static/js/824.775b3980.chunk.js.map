{"version":3,"file":"static/js/824.775b3980.chunk.js","mappings":"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","sources":["components/LanguageDropdown/index.js","components/Ui/NotificationDropdown.js","components/Ui/ProfileDropdown.js","components/Ui/SearchDropdown.js","components/Ui/TopbarSearch.js","helpers/GroupByFields.js","components/AppsDropdown/index.js","layouts/Topbar.js"],"sourcesContent":["// Internal Lib Import\r\nimport React, { useState } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport i18next from \"i18next\";\r\n\r\nimport enFlag from \"./flags/us.jpg\";\r\nimport bnFlag from \"./flags/bangladesh.png\";\r\nimport germanyFlag from \"./flags/germany.jpg\";\r\nimport italyFlag from \"./flags/italy.jpg\";\r\nimport spainFlag from \"./flags/spain.jpg\";\r\nimport russiaFlag from \"./flags/russia.jpg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SetLanguage } from \"../../redux/slices/SettingSlice\";\r\n\r\n// Get the languages\r\nconst Languages = [\r\n  {\r\n    display: \"Bangla\",\r\n    name: \"bn\",\r\n    flag: bnFlag,\r\n  },\r\n  {\r\n    display: \"English\",\r\n    name: \"en\",\r\n    flag: enFlag,\r\n  },\r\n  {\r\n    display: \"German\",\r\n    name: \"de\",\r\n    flag: germanyFlag,\r\n  },\r\n  {\r\n    display: \"Italian\",\r\n    name: \"it\",\r\n    flag: italyFlag,\r\n  },\r\n  {\r\n    display: \"Spanish\",\r\n    name: \"es\",\r\n    flag: spainFlag,\r\n  },\r\n  {\r\n    display: \"Russian\",\r\n    name: \"ru\",\r\n    flag: russiaFlag,\r\n  },\r\n];\r\n\r\nconst LanguageDropdown = (): React$Element<any> => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const state = useSelector((state) => state.Setting);\r\n\r\n  let Language = Languages.find((item) => item.name === state.Language);\r\n\r\n  Language = Language || {\r\n    display: \"English\",\r\n    name: \"en\",\r\n    flag: enFlag,\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleDropdown = ({ dropdownOpen: boolean }) => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n\r\n  const handleLanguage = (index) => {\r\n    i18next.changeLanguage(Languages[index].name);\r\n    dispatch(SetLanguage(Languages[index].name));\r\n  };\r\n\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-languages\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <img\r\n          src={Language.flag}\r\n          alt={Language.name}\r\n          className=\"me-0 me-sm-1\"\r\n          height=\"12\"\r\n        />\r\n        <span className=\"align-middle d-none d-sm-inline-block\">\r\n          {Language.display}\r\n        </span>\r\n        <i className=\"mdi mdi-chevron-down d-none d-sm-inline-block align-middle\"></i>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu\r\n        align={\"end\"}\r\n        className=\"dropdown-menu-animated topbar-dropdown-menu\"\r\n      >\r\n        <div onClick={toggleDropdown}>\r\n          {Languages.map((lang, i) => {\r\n            return (\r\n              <span\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-lang\"}\r\n                onClick={() => handleLanguage(i)}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <img\r\n                  src={lang.flag}\r\n                  alt={lang.name}\r\n                  className=\"me-1\"\r\n                  height=\"12\"\r\n                />\r\n                <span className=\"align-middle\">{lang.display}</span>\r\n              </span>\r\n            );\r\n          })}\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default LanguageDropdown;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\n\r\n// notifiaction continer styles\r\nconst notificationContainerStyle = {\r\n    maxHeight: '300px',\r\n    display: 'none',\r\n};\r\n\r\nconst notificationShowContainerStyle = {\r\n    maxHeight: '300px',\r\n};\r\n\r\ntype Message = {\r\n    id: number,\r\n    title: string,\r\n    time?: string,\r\n    subText: string,\r\n    avatar?: string,\r\n    icon?: string,\r\n    variant?: string,\r\n    isRead: boolean,\r\n};\r\n\r\ntype NotificationItem = {\r\n    day: string,\r\n    messages: Message[],\r\n};\r\n\r\ntype NotificationDropdownProps = {\r\n    notifications: Array<NotificationItem>,\r\n};\r\n\r\ntype NotificationDropdownState = {\r\n    dropdownOpen?: boolean,\r\n    notificationContainerStyle?: {},\r\n};\r\n\r\nconst NotificationDropdown = (\r\n    props: NotificationDropdownProps,\r\n    state: NotificationDropdownState\r\n): React$Element<any> => {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [notificationContentStyle, setNotificationContentStyles] = useState(notificationContainerStyle);\r\n\r\n    /*\r\n     * toggle notification-dropdown\r\n     */\r\n    const toggleDropdown = () => {\r\n        setDropdownOpen(!dropdownOpen);\r\n        setNotificationContentStyles(\r\n            notificationContentStyle === notificationContainerStyle\r\n                ? notificationShowContainerStyle\r\n                : notificationContainerStyle\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-notification\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\">\r\n                <i className=\"dripicons-bell noti-icon\"></i>\r\n                <span className=\"noti-icon-badge\"></span>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg\">\r\n                <div onClick={toggleDropdown}>\r\n                    <div className=\"dropdown-item noti-title px-3\">\r\n                        <h5 className=\"m-0\">\r\n                            <span className=\"float-end\">\r\n                                <Link to=\"/notifications\" className=\"text-dark\">\r\n                                    <small>Clear All</small>\r\n                                </Link>\r\n                            </span>\r\n                            Notification\r\n                        </h5>\r\n                    </div>\r\n                    <SimpleBar className=\"px-3\" style={notificationContentStyle}>\r\n                        {props.notifications.map((item, i) => {\r\n                            return (\r\n                                <React.Fragment key={i.toString()}>\r\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                                    {(item.messages || []).map((message, index) => {\r\n                                        return (\r\n                                            <Dropdown.Item\r\n                                                key={index + '-noti'}\r\n                                                className={classNames(\r\n                                                    'p-0 notify-item card shadow-none mb-2',\r\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\r\n                                                )}>\r\n                                                <Card.Body>\r\n                                                    <span className=\"float-end noti-close-btn text-muted\">\r\n                                                        <i className=\"mdi mdi-close\"></i>\r\n                                                    </span>\r\n                                                    <div className=\"d-flex align-items-center\">\r\n                                                        <div className=\"flex-shrink-0\">\r\n                                                            <div\r\n                                                                className={classNames(\r\n                                                                    'notify-icon',\r\n                                                                    message.variant && 'bg-' + message.variant\r\n                                                                )}>\r\n                                                                {message.avatar ? (\r\n                                                                    <img\r\n                                                                        src={message.avatar}\r\n                                                                        className=\"img-fluid rounded-circle\"\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <i className={message.icon}></i>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\r\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\r\n                                                                {message.title}{' '}\r\n                                                                {message.time && (\r\n                                                                    <small className=\"fw-normal text-muted ms-1\">\r\n                                                                        {message.time}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            </h5>\r\n                                                            <small className=\"noti-item-subtitle text-muted\">\r\n                                                                {message.subText}\r\n                                                            </small>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Body>\r\n                                            </Dropdown.Item>\r\n                                        );\r\n                                    })}\r\n                                </React.Fragment>\r\n                            );\r\n                        })}\r\n\r\n                        <div className=\"text-center\">\r\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\r\n                        </div>\r\n                    </SimpleBar>\r\n\r\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\r\n                        View All\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport classNames from \"classnames\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SetLogout } from \"../../redux/slices/AuthSlice\";\r\n\r\nconst ProfileDropdown = (props) => {\r\n  const profilePic = props.profilePic || null;\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  /*\r\n   * toggle profile-dropdown\r\n   */\r\n  const toggleDropdown = () => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-profile\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\r\n      >\r\n        <span className=\"account-user-avatar\">\r\n          <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\r\n        </span>\r\n        <span>\r\n          <span className=\"account-user-name\">{props.username}</span>\r\n          <span className=\"account-position\">{props.userTitle}</span>\r\n        </span>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu\r\n        align={\"end\"}\r\n        className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\"\r\n      >\r\n        <div onClick={toggleDropdown}>\r\n          <div className=\"dropdown-header noti-title\">\r\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\r\n          </div>\r\n          {props.menuItems.map((item, i) => {\r\n            return item.label === \"Logout\" ? (\r\n              <Link\r\n                onClick={() => dispatch(SetLogout())}\r\n                to={item.redirectTo}\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-profile-menu\"}\r\n              >\r\n                <i className={classNames(item.icon, \"me-1\")}></i>\r\n                <span>{item.label}</span>\r\n              </Link>\r\n            ) : (\r\n              <Link\r\n                to={item.redirectTo}\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-profile-menu\"}\r\n              >\r\n                <i className={classNames(item.icon, \"me-1\")}></i>\r\n                <span>{item.label}</span>\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default ProfileDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nconst SearchDropdown = (): React$Element<any> => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  /*\r\n   * toggle search-dropdown\r\n   */\r\n  const toggleDropdown = () => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-apps\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <i className=\"dripicons-search noti-icon\"></i>\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg p-0\">\r\n        <form className=\"p-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search ...\"\r\n          />\r\n        </form>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default SearchDropdown;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select, { components } from \"react-select\";\r\nimport classNames from \"classnames\";\r\n\r\n// utils\r\nimport { GroupByFields } from \"../../helpers/GroupByFields\";\r\n\r\n// images\r\nimport Avatar2 from \"../../assets/images/users/avatar-2.jpg\";\r\nimport Avatar5 from \"../../assets/images/users/avatar-5.jpg\";\r\n\r\n/*\r\n * get options\r\n */\r\nconst optionGetter = (option) => {\r\n  switch (option.type) {\r\n    case \"report\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"help\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"settings\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"title\":\r\n      return (\r\n        <div className=\"noti-title\">\r\n          <h6 className=\"text-overflow mb-2 text-uppercase\">Users</h6>\r\n        </div>\r\n      );\r\n    case \"users\":\r\n      return (\r\n        <>\r\n          <Link to=\"#\" className=\"dropdown-item notify-item p-0\">\r\n            <div className=\"d-flex\">\r\n              <img\r\n                src={option.userDetails.avatar}\r\n                alt=\"\"\r\n                className=\"d-flex me-2 rounded-circle\"\r\n                height=\"32\"\r\n              />\r\n              <div className=\"w-100\">\r\n                <h5 className=\"drop-username m-0 font-14\">\r\n                  {option.userDetails.firstname} {option.userDetails.lastname}\r\n                </h5>\r\n                <span className=\"user-subinfo font-12 mb-0\">\r\n                  {option.userDetails.position}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n        </>\r\n      );\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\n/*\r\n * filter options\r\n */\r\nconst formateOptions = (options) => {\r\n  const grouppedData = GroupByFields(options, (item) => {\r\n    return [item.type];\r\n  });\r\n\r\n  let formattedOptions = [];\r\n  let count = 0;\r\n\r\n  for (let i = 0; i < grouppedData.length; i++) {\r\n    for (let j = 0; j < grouppedData[i].length; j++) {\r\n      if (grouppedData[i][j].type === \"users\" && count === 0) {\r\n        grouppedData[i].splice(j, 0, {\r\n          label: \"Users\",\r\n          value: \"title\",\r\n          type: \"title\",\r\n        });\r\n        count = 1;\r\n      }\r\n      formattedOptions.push(grouppedData[i][j]);\r\n    }\r\n  }\r\n  return formattedOptions;\r\n};\r\n\r\n/* custon control */\r\nconst Control = ({ children, ...props }) => {\r\n  const { handleClick } = props.selectProps;\r\n  return (\r\n    <components.Control {...props}>\r\n      <span\r\n        onMouseDown={handleClick}\r\n        className=\"mdi mdi-magnify search-icon\"\r\n      ></span>\r\n      {children}\r\n    </components.Control>\r\n  );\r\n};\r\n\r\n/* custon indicator */\r\n\r\nconst IndicatorsContainer = (props) => {\r\n  const { handleClick } = props.selectProps;\r\n  return (\r\n    <div style={{}}>\r\n      <components.IndicatorsContainer {...props} className=\"input-group\">\r\n        <button\r\n          className=\"btn btn-primary input-group-text\"\r\n          onMouseDown={handleClick}\r\n        >\r\n          Search\r\n        </button>\r\n      </components.IndicatorsContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* custom menu list */\r\nconst MenuList = (props) => {\r\n  const { options } = props.selectProps;\r\n\r\n  return (\r\n    <components.MenuList {...props}>\r\n      {/* menu header */}\r\n      <div className=\"dropdown-header noti-title\">\r\n        <h5 className=\"text-overflow mb-2\">\r\n          Found <span className=\"text-danger\">{options.length}</span> results\r\n        </h5>\r\n      </div>\r\n      {props.children}\r\n    </components.MenuList>\r\n  );\r\n};\r\n\r\n/* fomates the option label */\r\nconst handleFormatOptionLabel = (option) => {\r\n  const formattedOption = optionGetter(option);\r\n  return <div>{formattedOption}</div>;\r\n};\r\n\r\ntype TopbarSearchProps = {};\r\n\r\nconst TopbarSearch = (props: TopbarSearchProps): React$Element<any> => {\r\n  const options = [\r\n    {\r\n      value: \"1\",\r\n      label: \"Analytics Report\",\r\n      icon: \"uil-notes\",\r\n      type: \"report\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"How can I help you?\",\r\n      icon: \"uil-life-ring\",\r\n      type: \"help\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"User profile settings\",\r\n      icon: \"uil-cog\",\r\n      type: \"settings\",\r\n    },\r\n    {\r\n      label: \"Erwin Brown\",\r\n      value: \"users1\",\r\n      type: \"users\",\r\n      userDetails: {\r\n        firstname: \"Erwin\",\r\n        lastname: \"Brown\",\r\n        position: \"UI Designer\",\r\n        avatar: Avatar2,\r\n      },\r\n    },\r\n    {\r\n      label: \"Jacob Deo\",\r\n      value: \"users2\",\r\n      type: \"users\",\r\n      userDetails: {\r\n        firstname: \"Jacob\",\r\n        lastname: \"Deo\",\r\n        position: \"Developer\",\r\n        avatar: Avatar5,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        {...props}\r\n        components={{ Control, IndicatorsContainer, MenuList }}\r\n        placeholder={\"Search...\"}\r\n        options={formateOptions(options)}\r\n        formatOptionLabel={handleFormatOptionLabel}\r\n        isOptionDisabled={(option) => option.type === \"title\"}\r\n        maxMenuHeight=\"350px\"\r\n        handleClick={onClick}\r\n        isSearchable\r\n        isClearable\r\n        name=\"search-app\"\r\n        className=\"app-search dropdown\"\r\n        classNamePrefix=\"react-select\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopbarSearch;\r\n","const GroupByFields = (array: Array<any>, f: any): Array<any> => {\r\n  var groups = {};\r\n  array.forEach((o) => {\r\n    var group = JSON.stringify(f(o));\r\n    groups[group] = groups[group] || [];\r\n    groups[group].push(o);\r\n  });\r\n  return Object.keys(groups).map((group) => {\r\n    return groups[group];\r\n  });\r\n};\r\n\r\nexport { GroupByFields };\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n// apps icon\r\nimport slackIcon from './icons/slack.png';\r\nimport bitbucketIcon from './icons/bitbucket.png';\r\nimport dribbbleIcon from './icons/dribbble.png';\r\nimport dropboxIcon from './icons/dropbox.png';\r\nimport githubIcon from './icons/github.png';\r\nimport gSuiteIcon from './icons/g-suite.png';\r\n\r\n// get the apps\r\nconst Apps = [\r\n    {\r\n        name: 'Slack',\r\n        icon: slackIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'GitHub',\r\n        icon: githubIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Dribbble',\r\n        icon: dribbbleIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Bitbucket',\r\n        icon: bitbucketIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Dropbox',\r\n        icon: dropboxIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'G Suite',\r\n        icon: gSuiteIcon,\r\n        redirectTo: '#',\r\n    },\r\n];\r\n\r\ntype AppsDropdownProps = {};\r\n\r\nconst AppsDropdown = (props: AppsDropdownProps): React$Element<any> => {\r\n    const apps = Apps || [];\r\n    const chunk_size = 3;\r\n    const appsChunks = Array(Math.ceil(apps.length / chunk_size))\r\n        .fill()\r\n        .map((_, index) => index * chunk_size)\r\n        .map((begin) => apps.slice(begin, begin + chunk_size));\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    /*\r\n     * toggle apps-dropdown\r\n     */\r\n    const toggleDropdown = ({ dropdownOpen: boolean }) => {\r\n        setDropdownOpen(!dropdownOpen);\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-apps\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\">\r\n                <i className=\"dripicons-view-apps noti-icon\"></i>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg p-0\">\r\n                <div onClick={toggleDropdown} className=\"p-2\">\r\n                    {appsChunks.map((chunk, idx) => (\r\n                        <div className=\"row g-0\" key={idx}>\r\n                            {chunk.map((item, i) => (\r\n                                <div className=\"col\" key={i}>\r\n                                    <Link className=\"dropdown-icon-item\" to={item.redirectTo}>\r\n                                        <img src={item.icon} alt=\"\" />\r\n                                        <span>{item.name}</span>\r\n                                    </Link>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default AppsDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\n\r\n// actions\r\nimport { ChangeLeftSideBarType, SetTheme } from \"../redux/slices/SettingSlice\";\r\n\r\n// components\r\nimport LanguageDropdown from \"../components/LanguageDropdown\";\r\nimport NotificationDropdown from \"../components/Ui/NotificationDropdown\";\r\nimport ProfileDropdown from \"../components/Ui/ProfileDropdown\";\r\nimport SearchDropdown from \"../components/Ui/SearchDropdown\";\r\nimport TopbarSearch from \"../components/Ui/TopbarSearch\";\r\nimport AppsDropdown from \"../components/AppsDropdown/\";\r\n\r\n// images\r\nimport avatar1 from \"../assets/images/users/avatar-2.jpg\";\r\nimport avatar2 from \"../assets/images/users/avatar-4.jpg\";\r\nimport logoSmDark from \"../assets/images/logo_sm_dark.png\";\r\nimport logoSmLight from \"../assets/images/logo_sm.png\";\r\nimport logo from \"../assets/images/logo.png\";\r\n\r\n//constants\r\nimport * as layoutConstants from \"../redux/slices/SettingSlice\";\r\n\r\n// get the notifications\r\nconst Notifications = [\r\n  {\r\n    day: \"Today\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Datacorp\",\r\n        subText: \"Caleb Flakelar commented on Admin\",\r\n        time: \"1 min ago\",\r\n        icon: \"mdi mdi-comment-account-outline\",\r\n        variant: \"primary\",\r\n        isRead: false,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Admin\",\r\n        subText: \"New user registered.\",\r\n        time: \"1 hours ago\",\r\n        icon: \"mdi mdi-account-plus\",\r\n        variant: \"info\",\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    day: \"Yesterday\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Cristina Pride\",\r\n        subText: \"Hi, How are you? What about our next meeting\",\r\n        time: \"1 day ago\",\r\n        avatar: avatar1,\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    day: \"30 Dec 2021\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Datacorp\",\r\n        subText: \"Caleb Flakelar commented on Admin\",\r\n        icon: \"mdi mdi-comment-account-outline\",\r\n        variant: \"primary\",\r\n        isRead: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Karen Robinson\",\r\n        subText: \"Wow ! this admin looks good and awesome design\",\r\n        avatar: avatar2,\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n// get the profilemenu\r\nconst ProfileMenus = [\r\n  {\r\n    label: \"My Account\",\r\n    icon: \"mdi mdi-account-circle\",\r\n    redirectTo: \"#\",\r\n  },\r\n  {\r\n    label: \"Settings\",\r\n    icon: \"mdi mdi-account-edit\",\r\n    redirectTo: \"#\",\r\n  },\r\n  {\r\n    label: \"Support\",\r\n    icon: \"mdi mdi-lifebuoy\",\r\n    redirectTo: \"#\",\r\n  },\r\n  {\r\n    label: \"Lock Screen\",\r\n    icon: \"mdi mdi-lock-outline\",\r\n    redirectTo: \"/account/lock-screen\",\r\n  },\r\n  {\r\n    label: \"Logout\",\r\n    icon: \"mdi mdi-logout\",\r\n    redirectTo: \"/account/logout\",\r\n  },\r\n];\r\n\r\nconst Topbar = ({\r\n  hideLogo,\r\n  navCssClasses,\r\n  openLeftMenuCallBack,\r\n  topbarDark,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isopen, setIsopen] = useState(false);\r\n  const { UserDetails } = useSelector((state) => state.User);\r\n\r\n  const navbarCssClasses = navCssClasses || \"\";\r\n  const containerCssClasses = !hideLogo ? \"container-fluid\" : \"\";\r\n\r\n  const { LayoutType, LeftSideBarType, LayoutColor } = useSelector(\r\n    (state) => state.Setting,\r\n  );\r\n\r\n  /**\r\n   * Toggle the leftmenu when having mobile screen\r\n   */\r\n  const handleLeftMenuCallBack = () => {\r\n    setIsopen((prevState) => !prevState);\r\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n    switch (LayoutType) {\r\n      case layoutConstants.LAYOUT_VERTICAL:\r\n        // condition added\r\n        if (window.innerWidth >= 768) {\r\n          if (LeftSideBarType === \"fixed\" || LeftSideBarType === \"scrollable\")\r\n            dispatch(\r\n              ChangeLeftSideBarType(\r\n                layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED,\r\n              ),\r\n            );\r\n          if (LeftSideBarType === \"condensed\")\r\n            dispatch(\r\n              ChangeLeftSideBarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED),\r\n            );\r\n        }\r\n        break;\r\n\r\n      case layoutConstants.LAYOUT_FULL:\r\n        if (document.body) {\r\n          document.body.classList.toggle(\"hide-menu\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classNames(\"navbar-custom\", navbarCssClasses)}>\r\n        <div className={containerCssClasses}>\r\n          {!hideLogo && (\r\n            <Link to=\"/\" className=\"topnav-logo\">\r\n              <span className=\"topnav-logo-lg\">\r\n                <img src={logo} alt=\"logo\" height=\"16\" />\r\n              </span>\r\n              <span className=\"topnav-logo-sm\">\r\n                <img\r\n                  src={topbarDark ? logoSmLight : logoSmDark}\r\n                  alt=\"logo\"\r\n                  height=\"16\"\r\n                />\r\n              </span>\r\n            </Link>\r\n          )}\r\n\r\n          <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n            <li className=\"notification-list topbar-dropdown d-xl-none\">\r\n              <SearchDropdown />\r\n            </li>\r\n            <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\r\n              <LanguageDropdown />\r\n            </li>\r\n            <li className=\"dropdown notification-list\">\r\n              <NotificationDropdown notifications={Notifications} />\r\n            </li>\r\n            <li className=\"dropdown notification-list d-none d-sm-inline-block\">\r\n              <AppsDropdown />\r\n            </li>\r\n            <li className=\"notification-list\">\r\n              {LayoutColor === \"light\" ? (\r\n                <button\r\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                  onClick={() => dispatch(SetTheme(\"dark\"))}\r\n                >\r\n                  <i className=\"uil-moon noti-icon\"></i>\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                  onClick={() => dispatch(SetTheme(\"light\"))}\r\n                >\r\n                  <i className=\"uil-sun noti-icon\"></i>\r\n                </button>\r\n              )}\r\n            </li>\r\n            <li className=\"dropdown notification-list\">\r\n              <ProfileDropdown\r\n                profilePic={UserDetails.Image}\r\n                menuItems={ProfileMenus}\r\n                username={UserDetails.Name}\r\n                userTitle={UserDetails.Roles}\r\n              />\r\n            </li>\r\n          </ul>\r\n          {/* toggle for vertical layout */}\r\n          {(LayoutType === layoutConstants.LAYOUT_VERTICAL ||\r\n            LayoutType === layoutConstants.LAYOUT_FULL) && (\r\n            <button\r\n              className=\"button-menu-mobile open-left\"\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <i className=\"mdi mdi-menu\" />\r\n            </button>\r\n          )}\r\n\r\n          {/* toggle for horizontal layout */}\r\n          {LayoutType === layoutConstants.LAYOUT_HORIZONTAL && (\r\n            <Link\r\n              to=\"#\"\r\n              className={classNames(\"navbar-toggle\", { open: isopen })}\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <div className=\"lines\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </Link>\r\n          )}\r\n\r\n          {/* toggle for detached layout */}\r\n          {LayoutType === layoutConstants.LAYOUT_DETACHED && (\r\n            <Link\r\n              to=\"#\"\r\n              className=\"button-menu-mobile disable-btn\"\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <div className=\"lines\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </Link>\r\n          )}\r\n          <TopbarSearch />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Topbar;\r\n"],"names":["Languages","display","name","flag","enFlag","useState","dropdownOpen","setDropdownOpen","state","useSelector","Setting","Language","find","item","dispatch","useDispatch","toggleDropdown","Dropdown","show","onToggle","variant","id","onClick","className","src","alt","height","align","map","lang","i","index","i18next","SetLanguage","style","cursor","notificationContainerStyle","maxHeight","notificationShowContainerStyle","props","notificationContentStyle","setNotificationContentStyles","as","Link","to","notifications","day","messages","message","classNames","isRead","Card","avatar","icon","title","time","subText","toString","profilePic","username","userTitle","menuItems","label","SetLogout","redirectTo","type","placeholder","formateOptions","options","grouppedData","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","GroupByFields","formattedOptions","count","length","j","splice","value","Control","children","handleClick","selectProps","c","onMouseDown","IndicatorsContainer","MenuList","handleFormatOptionLabel","option","formattedOption","userDetails","firstname","lastname","position","optionGetter","Avatar2","components","formatOptionLabel","isOptionDisabled","maxMenuHeight","e","preventDefault","stopPropagation","isSearchable","isClearable","classNamePrefix","Apps","apps","appsChunks","Array","Math","ceil","fill","_","begin","slice","chunk","idx","Notifications","avatar1","ProfileMenus","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","isopen","setIsopen","UserDetails","User","navbarCssClasses","containerCssClasses","LayoutType","LeftSideBarType","LayoutColor","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","ChangeLeftSideBarType","document","body","classList","toggle","logo","logoSmLight","logoSmDark","SetTheme","Image","Name","Roles","open"],"sourceRoot":""}